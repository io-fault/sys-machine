<?xml version="1.0" encoding="utf-8"?>
<!--
	# Transform documentation directory into presentable XHTML
!-->
<xsl:transform version="1.0"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:exsl="http://exslt.org/common"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:ctl="http://fault.io/xml/control"
	xmlns:f="http://fault.io/xml/fragments"
	xmlns:txt="http://if.fault.io/xml/text"
	xmlns:data="http://fault.io/xml/data"
	xmlns:Factor="http://fault.io/xpath#Factor"
	extension-element-prefixes="exsl"
	exclude-result-prefixes="f xsl exsl Factor">

	<ctl:namespaces
		exsl:keep="true"
		f:keep="true"
		txt:keep="true"
		data:keep="true"
		Factor:keep="true"
	/>

	<!--Overview of build-->
	<xsl:output
		method="xml" version="1.0" encoding="utf-8"
		omit-xml-declaration="yes"
		indent="no"/>

	<xsl:template match="field">
		<f:property identifier="{@identifier}">
			<xsl:if test="start and stop">
				<f:source unit="line" start="{start/@line}" stop="{stop/@line}"/>
				<f:source unit="octet" start="{start/@offset}" stop="{stop/@offset}"/>
			</xsl:if>

			<xsl:copy-of select="Factor:structure_comment('', ./comment/node())"/>
		</f:property>
	</xsl:template>

	<xsl:template name="resolve-id">
		<xsl:choose>
			<xsl:when test="@identifier!=''">
				<xsl:value-of select="@identifier"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat('LI', start/@line, '.', start/@offset)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template match="structure[field]">
		<xsl:variable name="id">
			<xsl:call-template name="resolve-id"/>
			<xsl:value-of select="'-struct'"/>
		</xsl:variable>
		<xsl:variable name="prefix" select="concat($id, '.')"/>

		<f:structure identifier="{@identifier}">
			<xsl:attribute name="xml:id">
				<xsl:value-of select="$id"/>
			</xsl:attribute>
			<xsl:if test="start and stop">
				<f:source unit="line" start="{start/@line}" stop="{stop/@line}"/>
				<f:source unit="octet" start="{start/@offset}" stop="{stop/@offset}"/>
			</xsl:if>

			<xsl:copy-of select="Factor:structure_comment($prefix, ./comment/node())"/>

			<xsl:apply-templates select="field"/>
		</f:structure>
	</xsl:template>

	<xsl:template mode="enum" match="value">
		<f:data identifier="{@identifier}">
			<data:integer><xsl:value-of select="text()"/></data:integer>
		</f:data>
	</xsl:template>

	<xsl:template match="enumeration[@identifier and @identifier!='']">
		<xsl:variable name="id">
			<xsl:call-template name="resolve-id"/>
			<xsl:value-of select="'-enum'"/>
		</xsl:variable>

		<xsl:variable name="prefix" select="concat($id, '.')"/>

		<f:enumeration identifier="{@identifier}">
			<xsl:attribute name="xml:id">
				<xsl:value-of select="$id"/>
			</xsl:attribute>
			<xsl:if test="start and stop">
				<f:source unit="line" start="{start/@line}" stop="{stop/@line}"/>
				<f:source unit="octet" start="{start/@offset}" stop="{stop/@offset}"/>
			</xsl:if>

			<xsl:copy-of select="Factor:structure_comment($prefix, ./comment/node())"/>

			<xsl:apply-templates mode="enum" select="value"/>
		</f:enumeration>
	</xsl:template>

	<xsl:template match="function">
		<xsl:variable name="prefix" select="concat(@identifier, '.')"/>

		<f:function identifier="{@identifier}">
			<xsl:attribute name="xml:id">
				<xsl:value-of select="@identifier"/>
			</xsl:attribute>
			<xsl:if test="start and stop">
				<f:source unit="line" start="{start/@line}" stop="{stop/@line}"/>
				<f:source unit="octet" start="{start/@offset}" stop="{stop/@offset}"/>
			</xsl:if>

			<xsl:copy-of select="Factor:structure_comment($prefix, ./comment/node())"/>

			<xsl:for-each select="parameter">
				<f:parameter identifier="{@identifier}">
				</f:parameter>
			</xsl:for-each>
		</f:function>
	</xsl:template>

	<xsl:template match="macro[@identifier]">
		<!--
			# Match all macros, but do not emit when there are duplicates.
			# Usually when duplicate definitions are emitted it's an X-Macro
			# definition and likely not of interest.
		!-->
		<xsl:variable name="id">
			<xsl:value-of select="@identifier"/>
			<xsl:value-of select="'-macro'"/>
		</xsl:variable>
		<xsl:variable name="prefix" select="concat($id, '.')"/>

		<xsl:variable name="nmacros" select="count(../macro[@identifier=$id])"/>
		<xsl:if test="$nmacros = 1">
			<f:macro identifier="{@identifier}">
				<xsl:attribute name="xml:id">
					<xsl:value-of select="$id"/>
				</xsl:attribute>

				<xsl:if test="start and stop">
					<f:source unit="line" start="{start/@line}" stop="{stop/@line}"/>
					<f:source unit="octet" start="{start/@offset}" stop="{stop/@offset}"/>
				</xsl:if>

				<xsl:copy-of select="Factor:structure_comment($prefix, ./comment/node())"/>
			</f:macro>
		</xsl:if>
	</xsl:template>

	<xsl:template match="introspection">
		<f:factor>
			<f:module language="{@language}">
				<xsl:apply-templates select="*"/>
			</f:module>
		</f:factor>
	</xsl:template>

	<xsl:template match="*"></xsl:template>

	<xsl:template match="/">
		<xsl:apply-templates select="/introspection"/>
	</xsl:template>
</xsl:transform>
